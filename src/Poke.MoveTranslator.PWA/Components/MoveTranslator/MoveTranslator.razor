@namespace Poke.MoveTranslator.PWA.Components
@using Poke.MoveTranslator.PWA.Const
@inherits MoveTranslatorBase

<div class="move-translator" style="@(Move is null ? "height:auto" : "")">
    <div class="move-translator-content">
        <MudPaper Class="d-flex flex-column" Elevation="0" Square="true">
            <MudHidden Breakpoint="Breakpoint.MdAndDown">
                @if (!IsInitializing)
                {
                    <MoveFilter
                        @bind-Language="@Language"
                        @bind-MoveName="@MoveName"
                        Languages="@Languages"
                        SearchHistory="@SearchHistory"
                        SearchSuggestions="@SearchSuggestions"
                        Disabled="@IsLoading"
                        SearchDisabled="@IsMoveLoadDisabled"
                        OnSuggestionValueSelect="@(async (suggestion) => { MoveName = suggestion; await LoadMove();})"
                        OnSearchHistoryValueRemove="@(item => SearchHistory.Remove(item))"
                        OnSearchHistoryValueSelect="@LoadItemFromHistory"
                        OnSearch="@LoadMove"
                        OnSuggestionsClear="@(() => SearchSuggestions.Clear())"
                        OnHistoryClear="@(() => SearchHistory.Clear())"/>
                }
            </MudHidden>

            @if (IsLoading || IsInitializing)
            {
                <MudPaper Elevation="0" Square="true">
                    <MudText Align="Align.Center">
                        <MudProgressCircular Color="Color.Default" Indeterminate="true"/>
                    </MudText>
                </MudPaper>
            }
            else if (Move != null)
            {
                <MudPaper Elevation="0" Square="true" Class="mt-4">
                    <MudGrid>
                        <MudItem xs="8">
                            <MudText Typo="Typo.h6">@MoveEnglishName</MudText>
                        </MudItem>
                        <MudItem xs="4">
                            <MudText Align="Align.Right">
                                <MudChip Label="true" Variant="Variant.Outlined" Size="Size.Small">@Move.Type.Name</MudChip>
                            </MudText>
                        </MudItem>
                    </MudGrid>
                    <MudDivider class="my-2"/>
                    <MudText Class="mb-1" Align="Align.Justify">
                        @Move.FlavorTextEntries.LastOrDefault(f => f.Language.Name == PokeConst.EnglishLanguage)?.FlavorText
                    </MudText>
                    <MudText Class="mb-1" Align="Align.Justify">
                        @Move.EffectEntries.LastOrDefault(f => f.Language.Name == PokeConst.EnglishLanguage)?.ShortEffect
                    </MudText>
                    <MudDivider class="my-2"/>
                    <MudText>
                        <strong>Accuracy</strong> @(Move.Accuracy?.ToString() ?? "-/-")
                    </MudText>
                    <MudText>
                        <strong>Power</strong> @(Move.Power?.ToString() ?? "-/-")
                    </MudText>
                    <MudText>
                        <strong>PP</strong> @Move.Pp
                    </MudText>
                </MudPaper>
            }
        </MudPaper>
    </div>
    <MudHidden Breakpoint="Breakpoint.LgAndUp">
        <footer class="move-translator-footer">
            <MudPaper Elevation="8" Square="true" Class="pa-4" Style="position: fixed;bottom:0;left: 0;right: 0">
                @if (!IsInitializing)
                {
                    <MoveFilter
                        @bind-Language="@Language"
                        @bind-MoveName="@MoveName"
                        Languages="@Languages"
                        SearchHistory="@SearchHistory"
                        SearchSuggestions="@SearchSuggestions"
                        Disabled="@IsLoading"
                        SearchDisabled="@IsMoveLoadDisabled"
                        OnSuggestionValueSelect="@(async (suggestion) => { MoveName = suggestion; await LoadMove();})"
                        OnSearchHistoryValueRemove="@(item => SearchHistory.Remove(item))"
                        OnSearchHistoryValueSelect="@LoadItemFromHistory"
                        OnSearch="@LoadMove"
                        OnSuggestionsClear="@(() => SearchSuggestions.Clear())"
                        OnHistoryClear="@(() => SearchHistory.Clear())"/>
                }
            </MudPaper>
        </footer>
    </MudHidden>
</div>