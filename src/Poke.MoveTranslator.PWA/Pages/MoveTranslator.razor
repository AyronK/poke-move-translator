@page "/move-translator"
@inject HttpClient Http
@using Poke.MoveTranslator.PWA.Services
@using PokeApiNet
@using Newtonsoft.Json
@using Blazored.LocalStorage
@using System.Collections.ObjectModel
@using System.Collections.Specialized
@inject IPokemonApi PokeApiService
@inject ILocalStorageService LocalStorageService

<PageTitle>Move Translator</PageTitle>

<MudText Typo="Typo.h3" GutterBottom="true">Poke move</MudText>
<MudText Class="mb-8">This component demonstrates fetching data from the server.</MudText>

@if (!IsInitializing)
{
    <MudForm>
        <MudGrid Justify="@Justify.Center">
            @if (LastValues.Count > 0)
            {
                <MudItem xs="12">
                    <MudText>Last moves</MudText>
                    <MudChipSet AllClosable="true" Style="overflow-x: auto;white-space: nowrap">
                        @foreach (NameByLanguage item in LastValues)
                        {
                            <MudChip Text="@item.Name" OnClick="@(() => OnLastValueClick(item))" OnClose="@(() => LastValues.Remove(item))"/>
                        }
                    </MudChipSet>
                </MudItem>
            }

            <MudItem xs="12" sm="6" md="2">
                <MudTextField @bind-Value="MoveName" Label="Move name" Variant="Variant.Text" Disabled="@IsLoading"></MudTextField>
            </MudItem>
            <MudItem xs="12" sm="6" md="6">
                <MudSelect T="string" @bind-Value="Language" Label="Language" AnchorOrigin="Origin.BottomCenter" Disabled="@IsLoading">
                    @foreach (string languageCode in languages.Keys)
                    {
                        <MudSelectItem Value="@languageCode">@(languages[languageCode])</MudSelectItem>
                    }
                </MudSelect>
            </MudItem>
            <MudItem xs="12" sm="6" md="4">
                <MudFab Color="Color.Primary" Icon="@Icons.Material.Filled.PlayCircleFilled" aria-label="play" OnClick="@LoadMove" Class="ml-auto d-flex d-sm-inline-flex"/>
            </MudItem>
        </MudGrid>
    </MudForm>
}

@if (IsLoading || IsInitializing)
{
    <MudProgressCircular Color="Color.Default" Indeterminate="true"/>
}
else if (Move != null)
{
    <div>English Name: @Move.Names.First(n => n.Language.Name == "en").Name</div>

    @JsonConvert.SerializeObject(Move)
}

@code {
    private Dictionary<string, string> languages;

    public string MoveName { get; set; }
    public bool IsLoading { get; set; }
    public bool IsInitializing { get; set; }
    public Move Move { get; set; }

    public string Language
    {
        get => _language;
        set
        {
            bool wasNull = string.IsNullOrWhiteSpace(_language);
            _language = value;
            if (!wasNull)
            {
                OnLanguageChange();
            }
        }
    }

    private ObservableCollection<NameByLanguage> LastValues { get; set; }

    private void OnLanguageChange()
    {
        LocalStorageService.SetItemAsync("LastLanguage", Language);
    }

    private string _language;

    protected override async Task OnInitializedAsync()
    {
        IsInitializing = true;
        languages = await PokeApiService.GetLanguages();
        Language = await LocalStorageService.GetItemAsync<string>("LastLanguage");
        LastValues = new ObservableCollection<NameByLanguage>(await LocalStorageService.GetItemAsync<NameByLanguage[]>("LastValues") ?? Array.Empty<NameByLanguage>());
        LastValues.CollectionChanged += async (_, a) =>
        {
            await LocalStorageService.SetItemAsync("LastValues", LastValues.ToArray());
            if (LastValues.Count >= 10 && a.Action == NotifyCollectionChangedAction.Add)
            {
                LastValues.RemoveAt(0);
            }
        };
        IsInitializing = false;
    }

    private async Task LoadMove()
    {
        IsLoading = true;
        Move = await PokeApiService.GetMove(MoveName, Language);

        NameByLanguage pair = new(MoveName, Language);
        if (!LastValues.Contains(pair))
        {
            LastValues.Add(pair);
        }

        IsLoading = false;
    }

    private async Task OnLastValueClick(NameByLanguage lastValue)
    {
        MoveName = lastValue.Name;
        Language = lastValue.Language;
        await LoadMove();
    }

    private record NameByLanguage(string Name, string Language);

}