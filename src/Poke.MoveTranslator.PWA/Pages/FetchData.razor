@page "/fetchdata"
@inject HttpClient Http
@using Poke.MoveTranslator.PWA.Shared
@using Poke.MoveTranslator.PWA.Services
@using PokeApiNet
@using Newtonsoft.Json
@inject IPokeApiService PokeApiService

<PageTitle>Weather forecast</PageTitle>

<MudText Typo="Typo.h3" GutterBottom="true">Poke move</MudText>
<MudText Class="mb-8">This component demonstrates fetching data from the server.</MudText>
<MudTextField @bind-Value="MoveName" Label="Standard" Variant="Variant.Text" Disabled="@IsLoading"></MudTextField>
<MudButton Variant="Variant.Filled" OnClick="@LoadMove" Disabled="@IsLoading">Go</MudButton>

@if (IsLoading || Move is null)
{
    <MudProgressCircular Color="Color.Default" Indeterminate="true" />
}
else
{
    <div>English Name: @Move.Names.First(n => n.Language.Name == "en").Name</div>
    
    @JsonConvert.SerializeObject(Move)
}


@code {
    private WeatherForecast[] forecasts;
    
    public string MoveName { get; set; }
    public bool IsLoading { get; set; }
    public Move Move { get; set; }

    protected override async Task OnInitializedAsync()
    {
        forecasts = await Http.GetFromJsonAsync<WeatherForecast[]>("sample-data/weather.json");
    }
    public class WeatherForecast
    {
        public DateTime Date { get; set; }

        public int TemperatureC { get; set; }

        public string Summary { get; set; }

        public int TemperatureF => 32 + (int)(TemperatureC / 0.5556);
    }

    private async Task LoadMove()
    {
        IsLoading = true;
        Move = await PokeApiService.GetMove(MoveName, "es"); 
        
        IsLoading = false;
    }

}
